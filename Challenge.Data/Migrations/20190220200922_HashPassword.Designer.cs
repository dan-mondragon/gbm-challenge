// <auto-generated />
using System;
using Challenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Challenge.Data.Migrations
{
    [DbContext(typeof(ChallengeContext))]
    [Migration("20190220200922_HashPassword")]
    partial class HashPassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Challenge.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("VehicleId");

                    b.HasKey("LocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Challenge.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new { UserId = 1, PasswordHash = new byte[] { 151, 128, 30, 216, 131, 214, 49, 128, 73, 82, 101, 3, 203, 209, 127, 171, 10, 15, 28, 155, 197, 205, 83, 182, 71, 208, 59, 89, 122, 103, 157, 145, 233, 98, 14, 75, 35, 10, 62, 229, 206, 2, 161, 1, 255, 2, 63, 154, 202, 221, 205, 132, 130, 250, 133, 16, 210, 98, 246, 62, 119, 163, 125, 37 }, PasswordSalt = new byte[] { 151, 210, 77, 157, 38, 190, 128, 172, 156, 86, 1, 76, 247, 131, 160, 14, 224, 16, 79, 232, 229, 117, 217, 151, 112, 249, 236, 213, 59, 133, 17, 80, 10, 100, 45, 185, 241, 211, 97, 55, 212, 165, 250, 199, 118, 86, 168, 56, 3, 194, 133, 136, 243, 119, 138, 121, 119, 248, 46, 184, 1, 41, 251, 134, 147, 106, 54, 51, 194, 214, 110, 26, 17, 237, 64, 250, 7, 137, 173, 212, 240, 102, 250, 27, 244, 62, 36, 69, 124, 248, 114, 195, 202, 130, 18, 237, 157, 63, 75, 1, 34, 171, 135, 218, 33, 243, 46, 241, 21, 138, 104, 175, 14, 33, 55, 106, 215, 61, 89, 159, 159, 56, 182, 7, 52, 255, 54, 162 }, Username = "Admin" }
                    );
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Plate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new { VehicleId = 1, CreatedAt = new DateTime(2019, 2, 20, 14, 9, 21, 504, DateTimeKind.Local), Plate = "ABC123", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { VehicleId = 2, CreatedAt = new DateTime(2019, 2, 20, 14, 9, 21, 509, DateTimeKind.Local), Plate = "EFG456", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { VehicleId = 3, CreatedAt = new DateTime(2019, 2, 20, 14, 9, 21, 509, DateTimeKind.Local), Plate = "HIJ789", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Location", b =>
                {
                    b.HasOne("Challenge.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Locations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
