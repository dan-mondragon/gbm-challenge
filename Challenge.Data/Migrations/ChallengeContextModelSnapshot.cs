// <auto-generated />
using System;
using Challenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Challenge.Data.Migrations
{
    [DbContext(typeof(ChallengeContext))]
    partial class ChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Challenge.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("VehicleId");

                    b.HasKey("LocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Challenge.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new { UserId = 1, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PasswordHash = new byte[] { 112, 134, 54, 248, 243, 67, 232, 172, 135, 219, 254, 206, 161, 54, 28, 19, 51, 58, 79, 207, 21, 50, 234, 231, 128, 36, 205, 52, 115, 103, 193, 2, 102, 82, 25, 178, 208, 225, 66, 221, 127, 64, 152, 184, 54, 75, 250, 179, 156, 250, 122, 212, 148, 253, 209, 7, 47, 29, 3, 223, 92, 50, 207, 0 }, PasswordSalt = new byte[] { 44, 17, 11, 200, 43, 187, 46, 5, 121, 62, 184, 197, 13, 206, 217, 240, 220, 252, 149, 126, 15, 19, 105, 212, 221, 250, 91, 36, 238, 25, 56, 196, 68, 135, 69, 45, 164, 149, 59, 115, 142, 121, 67, 131, 149, 28, 111, 160, 15, 187, 111, 30, 214, 121, 211, 45, 180, 102, 140, 57, 171, 206, 134, 233, 40, 196, 131, 1, 254, 184, 148, 33, 226, 235, 26, 17, 183, 32, 150, 238, 133, 184, 82, 245, 213, 143, 15, 12, 11, 201, 108, 116, 198, 82, 24, 34, 163, 234, 106, 33, 235, 21, 24, 118, 155, 31, 60, 244, 239, 138, 96, 6, 192, 189, 245, 140, 39, 178, 151, 200, 33, 207, 8, 90, 96, 132, 124, 8 }, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Username = "Admin" }
                    );
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Plate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new { VehicleId = 1, CreatedAt = new DateTime(2019, 2, 20, 17, 40, 52, 367, DateTimeKind.Local), Plate = "ABC123", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 1 },
                        new { VehicleId = 2, CreatedAt = new DateTime(2019, 2, 20, 17, 40, 52, 371, DateTimeKind.Local), Plate = "EFG456", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 1 },
                        new { VehicleId = 3, CreatedAt = new DateTime(2019, 2, 20, 17, 40, 52, 371, DateTimeKind.Local), Plate = "HIJ789", UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 1 }
                    );
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Location", b =>
                {
                    b.HasOne("Challenge.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Locations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Challenge.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Challenge.Domain.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
